pipeline{
     agent any
    environment{
        DOCKER_USERNAME='altshiftcreative'
        EMAIL_INFORM = 'abdal-rahman@altshiftcreative.com'

    }
    stages{
        stage ('check image version')
        {
            steps{
                echo "${imageVersion}"
            }
        }
        stage ('login docker hub')
        {
            steps{
                echo 'i will login in docker hub'
                sh "docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PwD}"
                echo "success docker hub login"
            }
        }
        stage ('check enviroment')
        {
            when{
                expression{
                    "${init_enviroment}"=='true'
                }
            }
            steps{
                sshagent(credentials:['shopbia_server']){
                    sh 'ssh  -o StrictHostKeyChecking=no root@135.181.203.3 uptime "cd /root/shopbia/docker; pwd; ls; cd /root/shopbia/docker; pwd; ls; docker ps"'
                    sh 'ssh  -o StrictHostKeyChecking=no root@135.181.203.3 uptime "cd /root/shopbia/docker; pwd; ls; cd /root/shopbia/docker; pwd; docker-compose -f mysql.yml down; docker-compose -f keycloak.yml down; docker-compose -f jhipster-registry.yml down; docker-compose -f elasticsearch.yml down; docker ps"'
                    sh 'ssh  -o StrictHostKeyChecking=no root@135.181.203.3 uptime "cd /root/shopbia/docker; pwd; ls; cd /root/shopbia/docker; pwd; docker-compose -f mysql.yml up -d; docker-compose -f keycloak.yml up -d; docker-compose -f jhipster-registry.yml up -d; docker-compose -f elasticsearch.yml up -d; docker ps"'
                }

            }

        }
        stage ('build gateway service and push'){
            steps{
                sh "cd GatewayService; pwd ; ./mvnw  package -Pprod -DskipTests jib:dockerBuild  docker:push docker:remove -Ddocker.removeMode=all  \"-Ddocker.image.version=${imageVersion}\""
            }
            post{
                always {
                    slackSend channel: 'mobile-app-food', message: "Back End Gateway service deploying for Dev Server - Version *$imageVersion*"
                }
            }
        }
        stage('build new release version'){
            steps{
                echo "number of new release version ${imageVersion}"
                sshagent(credentials:['shopbia_server']){
                    sh 'ssh  -o StrictHostKeyChecking=no root@135.181.203.3 uptime "cd /root/shopbia/docker; pwd; ls; cd /root/shopbia/docker; pwd; ls; docker ps"'
                    sh 'ssh  -o StrictHostKeyChecking=no root@135.181.203.3 uptime "cd /root/shopbia/docker; pwd; ls; cd /root/shopbia/docker; pwd;export imageVersion=${imageVersion}; docker-compose -f gateway-service.yml down; docker ps"'
                    sh 'ssh  -o StrictHostKeyChecking=no root@135.181.203.3 uptime "cd /root/shopbia/docker; pwd; ls;  cd /root/shopbia/docker; pwd; export imageVersion=${imageVersion} ; docker-compose -f gateway-service.yml up -d;  docker ps"'
                }
            }
        }

    }
    post {
        success{
            slackSend channel: 'mobile-app-food', message: "Back End Gateway service SUCCESS for Dev Server - Version *$imageVersion*, moredetails at *$BUILD_URL* , this update has : *$versionDescriptions*"
        }
        failure{
            emailext body: "*FAILURE* A New Release gateway Service ${imageVersion} was failure when deployed on development server moredetails at ${BUILD_URL}", to: "${EMAIL_INFORM}", subject: "Store Service ${imageVersion} failure deploy"
        }

    }
}
